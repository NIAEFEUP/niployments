- name: Build router VM in hosts that have the appropriate NICs
  hosts: controlplane[0]
  tasks:
    - name: Import router vars
      ansible.builtin.include_vars:
        file: "router-vars.json"
    - name: Get PCI devices to find appropriate NICs
      ansible.utils.cli_parse:
        command: lspci -Dn
        parser:
          name: ansible.netcommon.native
          template_path: router/templates/lspci-parser.yaml
        set_fact: pci_devices
    - name: Only include nodes that have suitable devices
      # FIXME (luisd): use vars instead of hardcoding vendor and device id
      when: (pci_devices | dict2items | map(attribute="value") | map(attribute="pci_vendor_device") | intersect(valid_nic_ids) | length) != 0
      block:
        - name: Check if router VM exists
          become: true
          community.libvirt.virt:
            command: list_vms
          register: routervm_stat
        - name: Build new router VM
          when: '"routerVM" not in routervm_stat.list_vms'
          block:
            - name: Build VM disk image
              ansible.builtin.include_tasks:
                file: "vm-image-task.ansible.yaml"
            - name: Enable vfio modules
              become: true
              community.general.modprobe:
                state: present
                persistent: present
                name: "{{ item }}"
              with_items:
                - "vfio"
                - "vfio_pci"
                - "vfio_iommu_type1"
            - name: Set device ids to load the vfio driver instead
              become: true
              ansible.builtin.template:
                src: templates/vfio.conf.j2
                dest: /etc/modprobe.d/vfio.conf
                mode: "644"
              notify:
                - Update intramfs and restart kernel
            - name: Create VM for router
              become: true
              community.libvirt.virt:
                autostart: true
                name: routerVM
                command: define
                xml: "{{ lookup('template', 'templates/libvirt-xml.j2') }}"
            - name: Start VM
              become: true
              community.libvirt.virt:
                name: routerVM
                state: running
  handlers:
    - name: Update intramfs and restart kernel
      block:
        - name: Update initramfs
          become: true
          ansible.builtin.command:
            cmd: dracut -f -v
          changed_when: true
        - name: Get current kernel version for reboot
          ansible.builtin.command:
            cmd: uname -r
          register: kernel_version
          changed_when: false
        - name: Reboot using kexec to apply the driver changes
          become: true
          ansible.builtin.reboot:
            reboot_command: "kexec /boot/vmlinuz-{{ kernel_version.stdout }} --initrd=/boot/initramfs-{{ kernel_version.stdout }}.img --reuse-cmdline"

# TODO: Delay ansible for the IP addresses of the nodes to be changed
# TODO: Make this playbook only run once

- name: Setup Kea config file
  hosts: nodes
  gather_facts: true
  vars:
    target_interface: 169.254.0.0
    # target_interface: 10.10.0.0
  tasks:
    - name: Extract nodes MAC addresses
      run_once: true # noqa: run-once[task]
      ansible.builtin.set_fact:
        mac_addresses: "{{ ( mac_addresses | default([]))  + (ansible_play_hosts_all | map('extract', hostvars) | json_query('[].ansible_%s.macaddress' % item )) }}"
      when: >
        ansible_play_hosts_all | map('extract', hostvars) | json_query('[].ansible_%s.ipv4' % item)
        | selectattr('network', 'defined') | selectattr('network', '==', target_interface)
      loop: "{{ ansible_play_hosts_all | map('extract', hostvars) | json_query('[].ansible_interfaces') | flatten | unique }}"

    - name: Skip for empty macaddresess list
      when: mac_addresses is undefined or not mac_addresses
      ansible.builtin.meta: end_play

    - name: Export MAC addresses to the routers
      ansible.builtin.set_fact:
        mac_addresses: "{{ mac_addresses }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['routers'] }}"

- name: Setup internal IP for the routers
  hosts: routers
  vars:
    target_network: 169.254.0.0
  tasks:
    - name: Skip for empty macaddresess list
      when: mac_addresses is undefined or not mac_addresses
      ansible.builtin.meta: end_play

    - name: Get internal interfaces
      ansible.builtin.set_fact:
        router_interface: "{{ item }}"
        cacheable: true # cache it to other playbooks in this run use it
      when: (hostvars[inventory_hostname]['ansible_%s' % item] | default({})).get('ipv4', {}).get('network') == target_network
      loop: "{{ ansible_interfaces }}"
    - name: Get internal interface if router dhcp has been defined
      ansible.builtin.set_fact:
        router_interface: "{{ item }}"
        cacheable: true # cache it to other playbooks in this run use it
      # FIXME (luisd): remove hardcoded ip on refactor
      when: >
        not router_interface and
        (hostvars[inventory_hostname]['ansible_%s' % item] | default({})).get('ipv4', {}).get('network') == "10.10.0.0"
      loop: "{{ ansible_interfaces }}"

- name: Setup static IP
  hosts: routers
  tasks:
    - name: Skip for empty macaddresess list
      when: mac_addresses is undefined or not mac_addresses
      ansible.builtin.meta: end_play

    - name: Setup internal network config to vm
      become: true
      ansible.builtin.template:
        src: templates/02-internal.network.j2
        dest: /etc/systemd/network/02-internal.network
        mode: "644"
    - name: Restart network service on VM
      become: true
      ansible.builtin.command:
        cmd: systemctl --no-block restart systemd-networkd
      ignore_unreachable: true
      async: 10
      poll: 0
    - name: Update routers IP's
      connection: local
      ansible.builtin.lineinfile:
        path: '{{ inventory_dir }}/ansible-inventory-dev.ini'
        regexp: '^{{ inventory_hostname }}(.*)ansible_ssh_host=([^ ]*) (.*)'
        line: '{{ inventory_hostname }}\1ansible_ssh_host=10.10.0.{{ (inventory_hostname[-1] | int + 1) | string }} \3'
        backrefs: true
    - name: Refresh inventory
      ansible.builtin.meta: refresh_inventory
    - name: Add nameserver to VM
      become: true
      ansible.builtin.lineinfile:
        path: /etc/resolvconf/resolv.conf.d/tail
        line: nameserver 1.1.1.1
        mode: "644"
        create: true


- name: Run DHCP4 Server with Kea
  hosts: routers
  tasks:
    - name: Install kea package
      become: true
      ansible.builtin.apt:
        name: kea
        update_cache: true

    - name: Get old config file
      ansible.builtin.command:
        cmd: cat /etc/kea/kea-dhcp4.conf
      failed_when: false # never fail because it will be handle in the next task
      changed_when: true
      register: old_config

    - name: Write old mac addresses
      ansible.builtin.set_fact:
        mac_addresses: >
          {{ (old_config.stdout | from_json | json_query('Dhcp4.subnet4[0].reservations[*]."hw-address"')) + (mac_addresses | default([])) }}
      when: old_config.rc == 0

    - name: Write config file
      become: true
      ansible.builtin.template:
        src: templates/kea-dhcp4.conf.j2
        dest: /etc/kea/kea-dhcp4.conf
        mode: "644"
    - name: Create leases file if not exists
      become: true
      ansible.builtin.file:
        path: /var/lib/kea/dhcp4.leases
        state: touch
        mode: '0700'
    - name: Update nodes IP's
      connection: local
      ansible.builtin.lineinfile:
        path: '{{ inventory_dir }}/ansible-inventory-dev.ini'
        regexp: '^{{ item }}(.*)ansible_ssh_host=([^ ]*) (.*)'
        line: >
          {{ item }}\1ansible_ssh_host=10.10.0.{{ (groups["nodes"].index(item) + 1 + (groups["routers"] | length) + 1)  | string }} \3
        backrefs: true
      loop: "{{ groups['nodes'] }}"

    - name: Restart kea dhcp server
      become: true
      ansible.builtin.systemd:
        service: kea-dhcp4-server
        state: restarted
    - name: Refresh the inventory
      ansible.builtin.meta: refresh_inventory
